
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/plots/plot_camera_projection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_plots_plot_camera_projection.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_plots_plot_camera_projection.py:


=================
Camera Projection
=================

We can see the camera coordinate frame and a grid of points in the camera
coordinate system which will be projected to the sensor. From the coordinates
on the sensor we can compute the corresponding pixels.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from pytransform3d.transformations import plot_transform
    from pytransform3d.camera import make_world_grid, cam2sensor, sensor2img








.. GENERATED FROM PYTHON SOURCE LINES 16-21

Camera Details
--------------
We have to define the focal length and sensor size of the camera in meters as
well as the image size in pixels. The sensor size is extraordinarily large so
that we can see it.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    focal_length = 0.2
    sensor_size = (0.2, 0.15)
    image_size = (640, 480)








.. GENERATED FROM PYTHON SOURCE LINES 26-30

Grid
----
We define a grid in 3D world coordinates and compute its projection to the
sensor in 3D.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: Python

    cam_grid = make_world_grid(n_points_per_line=11) - np.array([0, 0, -2, 0])
    img_grid_3d = cam_grid * focal_length








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Projection
----------
First, we project the grid from its original 3D coordinates to its projection
on the sensor, then we convert it to image coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: Python

    sensor_grid = cam2sensor(cam_grid, focal_length)
    img_grid = sensor2img(sensor_grid, sensor_size, image_size)








.. GENERATED FROM PYTHON SOURCE LINES 42-46

Plotting
--------
Now we can plot the grid in 3D, projected to the 3D sensor, and projected to
the image.

.. GENERATED FROM PYTHON SOURCE LINES 46-67

.. code-block:: Python

    plt.figure(figsize=(12, 5))
    ax = plt.subplot(121, projection="3d")
    ax.set_title("Grid in 3D camera coordinate system")
    ax.set_xlim((-1, 1))
    ax.set_ylim((-1, 1))
    ax.set_zlim((0, 2))
    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")
    c = np.arange(len(cam_grid))
    ax.scatter(cam_grid[:, 0], cam_grid[:, 1], cam_grid[:, 2], c=c)
    ax.scatter(img_grid_3d[:, 0], img_grid_3d[:, 1], img_grid_3d[:, 2], c=c)
    plot_transform(ax)

    ax = plt.subplot(122, aspect="equal")
    ax.set_title("Grid in 2D image coordinate system")
    ax.scatter(img_grid[:, 0], img_grid[:, 1], c=c)
    ax.set_xlim((0, image_size[0]))
    ax.set_ylim((0, image_size[1]))

    plt.show()



.. image-sg:: /_auto_examples/plots/images/sphx_glr_plot_camera_projection_001.png
   :alt: Grid in 3D camera coordinate system, Grid in 2D image coordinate system
   :srcset: /_auto_examples/plots/images/sphx_glr_plot_camera_projection_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.146 seconds)


.. _sphx_glr_download__auto_examples_plots_plot_camera_projection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_camera_projection.ipynb <plot_camera_projection.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_camera_projection.py <plot_camera_projection.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_camera_projection.zip <plot_camera_projection.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
