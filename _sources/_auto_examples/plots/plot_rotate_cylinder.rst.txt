
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/plots/plot_rotate_cylinder.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_plots_plot_rotate_cylinder.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_plots_plot_rotate_cylinder.py:


===============
Rotate Cylinder
===============

In this example, we apply a constant torque (tau) to a cylinder at its
center of gravity and plot it at several steps during the acceleration.

.. GENERATED FROM PYTHON SOURCE LINES 9-57



.. image-sg:: /_auto_examples/plots/images/sphx_glr_plot_rotate_cylinder_001.png
   :alt: plot rotate cylinder
   :srcset: /_auto_examples/plots/images/sphx_glr_plot_rotate_cylinder_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from pytransform3d.plot_utils import plot_cylinder
    from pytransform3d.rotations import matrix_from_compact_axis_angle
    from pytransform3d.transformations import transform_from, plot_transform


    def inertia_of_cylinder(mass, length, radius):
        I_xx = I_yy = 0.25 * mass * radius**2 + 1.0 / 12.0 * mass * length**2
        I_zz = 0.5 * mass * radius**2
        return np.eye(3) * np.array([I_xx, I_yy, I_zz])


    A2B = np.eye(4)

    length = 1.0
    radius = 0.1
    mass = 1.0
    dt = 0.2
    inertia = inertia_of_cylinder(mass, length, radius)
    tau = np.array([0.05, 0.05, 0.0])
    angular_velocity = np.zeros(3)
    orientation = np.zeros(3)

    ax = None
    for p_xy in np.linspace(-2, 2, 21):
        A2B = transform_from(
            R=matrix_from_compact_axis_angle(orientation),
            p=np.array([p_xy, p_xy, 0.0]),
        )
        ax = plot_cylinder(
            length=length,
            radius=radius,
            A2B=A2B,
            wireframe=False,
            alpha=0.2,
            ax_s=2.0,
            ax=ax,
        )
        plot_transform(ax=ax, A2B=A2B, s=radius, lw=3)

        angular_acceleration = np.linalg.inv(inertia).dot(tau)
        angular_velocity += dt * angular_acceleration
        orientation += dt * angular_velocity
    ax.view_init(elev=30, azim=70)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.160 seconds)


.. _sphx_glr_download__auto_examples_plots_plot_rotate_cylinder.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rotate_cylinder.ipynb <plot_rotate_cylinder.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rotate_cylinder.py <plot_rotate_cylinder.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_rotate_cylinder.zip <plot_rotate_cylinder.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
