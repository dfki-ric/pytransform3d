
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/plots/plot_straight_line_path.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_plots_plot_straight_line_path.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_plots_plot_straight_line_path.py:


========================
Plot Straight Line Paths
========================

We will compose a trajectory of multiple straight line paths in exponential
coordinates. This is a demonstration of batch conversion from exponential
coordinates to transformation matrices.

.. GENERATED FROM PYTHON SOURCE LINES 10-64



.. image-sg:: /_auto_examples/plots/images/sphx_glr_plot_straight_line_path_001.png
   :alt: plot straight line path
   :srcset: /_auto_examples/plots/images/sphx_glr_plot_straight_line_path_001.png
   :class: sphx-glr-single-img





.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt
    from pytransform3d.plot_utils import Trajectory, make_3d_axis, remove_frame
    from pytransform3d.trajectories import transforms_from_exponential_coordinates
    from pytransform3d.transformations import (
        exponential_coordinates_from_transform, transform_from)
    from pytransform3d.rotations import active_matrix_from_angle


    def time_scaling(t, t_max):
        """Linear time scaling."""
        return np.asarray(t) / t_max


    def straight_line_path(start, goal, s):
        """Compute straight line path in exponential coordinates."""
        start = np.asarray(start)
        goal = np.asarray(goal)
        return (start[np.newaxis] * (1.0 - s)[:, np.newaxis]
                + goal[np.newaxis] * s[:, np.newaxis])


    s = time_scaling(np.linspace(0.0, 5.0, 50001), 5.0)
    start = transform_from(
        R=active_matrix_from_angle(1, -0.4 * np.pi),
        p=np.array([-1, -2.5, 0])
    )
    goal1 = transform_from(
        R=active_matrix_from_angle(1, -0.1 * np.pi),
        p=np.array([-1, 1, 0])
    )
    goal2 = transform_from(
        R=active_matrix_from_angle(2, -np.pi),
        p=np.array([-0.65, -0.75, 0])
    )
    path1 = straight_line_path(
        exponential_coordinates_from_transform(start),
        exponential_coordinates_from_transform(goal1),
        s
    )
    path2 = straight_line_path(
        exponential_coordinates_from_transform(goal1),
        exponential_coordinates_from_transform(goal2),
        s
    )
    H = transforms_from_exponential_coordinates(np.vstack((path1, path2)))
    ax = make_3d_axis(1.0)
    trajectory = Trajectory(H, n_frames=1000, show_direction=False, s=0.3)
    trajectory.add_trajectory(ax)
    ax.view_init(azim=-95, elev=70)
    ax.set_xlim((-2.2, 1.3))
    ax.set_ylim((-2.5, 1))
    remove_frame(ax)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.233 seconds)


.. _sphx_glr_download__auto_examples_plots_plot_straight_line_path.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_straight_line_path.ipynb <plot_straight_line_path.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_straight_line_path.py <plot_straight_line_path.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_straight_line_path.zip <plot_straight_line_path.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
